/* Generated By:JavaCC: Do not edit this line. Test.java */
package MattusCompilerPackage;
import java.io.FileNotFoundException;
import java.io.FileReader;
import JJTree.*;
import java.util.ArrayList;

public class Test implements TestConstants {
        public static void main(String[] args) throws ParseException, TokenMgrError, FileNotFoundException
        {
                Test c = new Test(new FileReader("Z:\\test.txt"));
                TreeNode program = BodyBase();
                TypeController.FixTypesInTypesList();
                TypeController.FixTypesInJJTree(program);
                program.execute();
                System.out.println("End of parsing.");
        }

  static final public void BITN() throws ParseException {
    jj_consume_token(BIT);
    jj_consume_token(MULT);
    DIGITSPROD();
  }

  static final public void STRINGN() throws ParseException {
    jj_consume_token(STRING);
    jj_consume_token(DOLLARSIGN);
    DIGITSPROD();
  }

  static final public Token DIGITSPROD() throws ParseException {
    Token t;
    t = jj_consume_token(DIG);
        {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public Token TYPE() throws ParseException {
    Token t = null;
    //<TYPEWITHOUTPREFIX> | <TYPECANTAKEPREFIX> | <UNSIGNED> <TYPECANTAKEPREFIX> | BITN() | STRINGN()
        //t = <TYPETEST>
        t = jj_consume_token(ID);
     {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public BodyNode BodyBase() throws ParseException {
    BodyNode n = new BodyNode(null);
    n.isBase = true;
    TreeNode next = null;
    next = Body(n);
                if (next != null)
                {
                    n.addChild(next);
                    next = null;
                }
    jj_consume_token(0);
            {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public BodyNode Body(TreeNode baseNode) throws ParseException {
    BodyNode n = new BodyNode(baseNode);
    TreeNode next = null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIM:
      case FOR:
      case WHILE:
      case DO:
      case END:
      case IF:
      case EXIT:
      case SUB:
      case FUNCTION:
      case KWTYPE:
      case GOTO:
      case PRINT:
      case INPUT:
      case ID:
      case IDWITHSUFFIX:
      case EOL:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      try {
        if (jj_2_3(2147483647)) {
          next = EndProgramStatement(n);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOL:
            jj_consume_token(EOL);
            break;
          case DIM:
            next = DIMStatement(n);
            break;
          case FOR:
            next = ForStatement(n);
            break;
          case ID:
          case IDWITHSUFFIX:
            if (jj_2_1(2147483647)) {
              next = LabelStatement(n);
            } else if (jj_2_2(2147483647)) {
              next = AssignWithEOL(n);
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case ID:
                next = SubCall(n);
                break;
              default:
                jj_la1[1] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            break;
          case PRINT:
            next = Print(n);
            break;
          case IF:
            next = IfStatement(n);
            break;
          case WHILE:
          case DO:
            next = WhileStatement(n);
            break;
          case GOTO:
            next = GotoStatement(n);
            break;
          case KWTYPE:
            TypeUD(n);
            break;
          case EXIT:
            next = ExitForStatement(n);
            break;
          case INPUT:
            next = Input(n);
            break;
          case SUB:
            Sub(n);
            break;
          case FUNCTION:
            Function(n);
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
                if (next != null)
                {
                    n.addChild(next);
                    next = null;
                }
      } catch (ParseException ex) {
            System.err.println(ex.getMessage());
            while(getToken(0).kind != EOL)
                    getNextToken();
      }
    }
            {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public ForNode ForStatement(TreeNode baseNode) throws ParseException {
        ForNode forNode = new ForNode(baseNode);
        BodyNode body = new BodyNode(forNode);
        TreeNode next;
        VariableNode vNode;
        ConstantNode cNode;
        Token t;
    jj_consume_token(FOR);
    next = AssignWithoutEOL(body);
                                         body.addChild(next);
    jj_consume_token(TO);
    next = Expr(body);
                                                                                       body.addChild(next);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STEP:
      jj_consume_token(STEP);
      if (jj_2_4(2147483647)) {
        next = AssignWithoutEOL(body);
                                                 forNode.setStepOccured(true);  body.addChild(next);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STR:
        case MINUS:
        case NUMBER:
        case ID:
        case 66:
          next = Expr(body);
                                     forNode.setStepOccured(true); body.addChild(next);
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(EOL);
    next = Body(body);
                       body.addChild(next);
    jj_consume_token(NEXT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
                        forNode.setVarNextOccured(true); vNode = new VariableNode(t.image, body); body.addChild(vNode);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(EOL);
        forNode.addChild(body);
        {if (true) return forNode;}
    throw new Error("Missing return statement in function");
  }

  static final public EndProgramNode EndProgramStatement(TreeNode baseNode) throws ParseException {
    EndProgramNode eNode = new EndProgramNode(baseNode);
    jj_consume_token(END);
    jj_consume_token(EOL);
        {if (true) return eNode;}
    throw new Error("Missing return statement in function");
  }

  static final public TreeNode LabelStatement(TreeNode baseNode) throws ParseException {
    BodyNode next;
    LabelNode labelNode = new LabelNode(baseNode);
    Token t;
    t = jj_consume_token(ID);
    jj_consume_token(65);
    jj_consume_token(EOL);
                        labelNode.setLabelString(t.image);
    next = Body(baseNode);
                            labelNode.setBodyNode(next); baseNode.addChild(next);
        {if (true) return labelNode;}
    throw new Error("Missing return statement in function");
  }

  static final public TreeNode GotoStatement(TreeNode baseNode) throws ParseException {
    GotoNode gNode;
    Token t;
    jj_consume_token(GOTO);
    t = jj_consume_token(ID);
    jj_consume_token(EOL);
                            gNode = new GotoNode(baseNode); gNode.setGotoString(t.image);
        {if (true) return gNode;}
    throw new Error("Missing return statement in function");
  }

  static final public TreeNode ExitForStatement(TreeNode baseNode) throws ParseException {
    ExitForNode eNode;
    Token t;
    jj_consume_token(EXIT);
    jj_consume_token(FOR);
    jj_consume_token(EOL);
                         eNode = new ExitForNode(baseNode);
        {if (true) return eNode;}
    throw new Error("Missing return statement in function");
  }

  static final public IfElseNode IfStatement(TreeNode baseNode) throws ParseException {
        IfElseNode ifElseNode = new IfElseNode(baseNode);
        BodyNode ifNode = new BodyNode(ifElseNode);
        BodyNode elseNode = new BodyNode(ifElseNode);
        TreeNode next;
    jj_consume_token(IF);
    next = LogExpr(baseNode);
                                    ifNode.addChild(next);
    jj_consume_token(THEN);
    jj_consume_token(EOL);
    next = Body(baseNode);
                           ifNode.addChild(next);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      next = Body(baseNode);
                                      elseNode.addChild(next);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(ENDIF);
    jj_consume_token(EOL);
        ifElseNode.addChild(ifNode);
        ifElseNode.addChild(elseNode);
        {if (true) return ifElseNode;}
    throw new Error("Missing return statement in function");
  }

  static final public void TypeUD(TreeNode baseNode) throws ParseException {
    TypeUDNodeStructure typeNode = new TypeUDNodeStructure();
    AssignNode aNode;
    TreeNode next;
    Token t;
    jj_consume_token(KWTYPE);
    t = jj_consume_token(ID);
                       typeNode.setStringOfTypeNode(t.image);
    jj_consume_token(EOL);
    label_2:
    while (true) {
      aNode = TypeDIMStatement(baseNode);
                                          typeNode.addFieldToHashmap(aNode);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SHARED:
      case ID:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(END);
    jj_consume_token(KWTYPE);
        TypeController.TypeUDList.add(typeNode);
  }

  static final public AssignNode DIMSUFFIX(TreeNode baseNode) throws ParseException {
    AssignNode aNode;
    Token tShared = null;
    Token tType = null;
    Token tVariable;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SHARED:
      tShared = jj_consume_token(SHARED);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    //LOOKAHEAD ( <IDWITHSUFFIX> )
        //(
        //    <IDWITHSUFFIX>
        //    ("(" (<NUMBER>)? ")")?
        //)
        //|    
            tVariable = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      tType = TYPE();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
                                 aNode = new AssignNode(tVariable.image, tType, tShared, baseNode);
        {if (true) return aNode;}
    throw new Error("Missing return statement in function");
  }

  static final public AssignNode TypeDIMStatement(TreeNode baseNode) throws ParseException {
    AssignNode aNode;
    aNode = DIMSUFFIX(baseNode);
    jj_consume_token(EOL);
        {if (true) return aNode;}
    throw new Error("Missing return statement in function");
  }

  static final public AssignNode DIMStatement(TreeNode baseNode) throws ParseException {
    AssignNode aNode;
    jj_consume_token(DIM);
    aNode = DIMSUFFIX(baseNode);
    jj_consume_token(EOL);
        {if (true) return aNode;}
    throw new Error("Missing return statement in function");
  }

  static final public TreeNode WhileStatement(TreeNode baseNode) throws ParseException {
        TreeNode node;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
      node = WhileNative(baseNode);
      break;
    case DO:
      if (jj_2_6(2147483647)) {
        node = DoInitWhileStatement(baseNode);
      } else if (jj_2_7(2147483647)) {
        node = DoInitUntilStatement(baseNode);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DO:
          if (jj_2_5(2147483647)) {
            node = DoPostfixWhileStatement(baseNode);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DO:
              node = DoPostfixUntilStatement(baseNode);
              break;
            default:
              jj_la1[10] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  static final public WhileNode WhileNative(TreeNode baseNode) throws ParseException {
        WhileNode whileNode = new WhileNode(baseNode);
        BodyNode bodyNode = new BodyNode(whileNode);
        TreeNode next;
    jj_consume_token(WHILE);
    next = LogExpr(bodyNode);
                                      bodyNode.addChild(next);
    jj_consume_token(EOL);
    next = Body(bodyNode);
                           bodyNode.addChild(next);
    jj_consume_token(WEND);
    jj_consume_token(EOL);
        whileNode.addChild(bodyNode);
        {if (true) return whileNode;}
    throw new Error("Missing return statement in function");
  }

  static final public WhileNode DoInitWhileStatement(TreeNode baseNode) throws ParseException {
        WhileNode whileNode = new WhileNode(baseNode);
        BodyNode bodyNode = new BodyNode(whileNode);
        TreeNode next;
    jj_consume_token(DO);
    jj_consume_token(WHILE);
    next = LogExpr(bodyNode);
                                          bodyNode.addChild(next);
    jj_consume_token(EOL);
    next = Body(bodyNode);
                                bodyNode.addChild(next);
    jj_consume_token(LOOP);
    jj_consume_token(EOL);
        whileNode.addChild(bodyNode);
        {if (true) return whileNode;}
    throw new Error("Missing return statement in function");
  }

  static final public UntilNode DoInitUntilStatement(TreeNode baseNode) throws ParseException {
        UntilNode unitlNode = new UntilNode(baseNode);
        BodyNode bodyNode = new BodyNode(unitlNode);
        TreeNode next;
    jj_consume_token(DO);
    jj_consume_token(UNTIL);
    next = LogExpr(bodyNode);
                                          bodyNode.addChild(next);
    jj_consume_token(EOL);
    next = Body(unitlNode);
                                 bodyNode.addChild(next);
    jj_consume_token(LOOP);
    jj_consume_token(EOL);
        unitlNode.addChild(bodyNode);
        {if (true) return unitlNode;}
    throw new Error("Missing return statement in function");
  }

  static final public WhileNode DoPostfixWhileStatement(TreeNode baseNode) throws ParseException {
        WhileNode doWhileNode = new WhileNode(baseNode);
        BodyNode bodyNode = new BodyNode(doWhileNode);
        TreeNode nextWhile1;
        TreeNode nextWhile2;
    jj_consume_token(DO);
    jj_consume_token(EOL);
    nextWhile1 = Body(bodyNode);
    jj_consume_token(LOOP);
    jj_consume_token(WHILE);
    nextWhile2 = LogExpr(bodyNode);
            bodyNode.addChild(nextWhile2);
            bodyNode.addChild(nextWhile1);
    jj_consume_token(EOL);
        doWhileNode.addChild(bodyNode);
        {if (true) return doWhileNode;}
    throw new Error("Missing return statement in function");
  }

  static final public UntilNode DoPostfixUntilStatement(TreeNode baseNode) throws ParseException {
        UntilNode doUnitlNode = new UntilNode(baseNode);
        BodyNode bodyNode = new BodyNode(doUnitlNode);
        TreeNode nextUntil1;
        TreeNode nextUntil2;
    jj_consume_token(DO);
    jj_consume_token(EOL);
    nextUntil1 = Body(bodyNode);
    jj_consume_token(LOOP);
    jj_consume_token(UNTIL);
    nextUntil2 = LogExpr(bodyNode);
            bodyNode.addChild(nextUntil2);
            bodyNode.addChild(nextUntil1);
    jj_consume_token(EOL);
        doUnitlNode.addChild(bodyNode);
        {if (true) return doUnitlNode;}
    throw new Error("Missing return statement in function");
  }

  static final public TreeNode Expr(TreeNode baseNode) throws ParseException {
    double i;
    double value;
    ExpressionNode n = new ExpressionNode(baseNode);
    TreeNode n1,n2 = null;
    n1 = Term(n);
     n.addChild(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        n2 = Expr(n);
              n.setType("+");n.addChild(n2);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        n2 = Expr(n);
              n.setType("-");n.addChild(n2);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
        if (n2 == null)
            {if (true) return n1 ;}
        {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public TreeNode Term(TreeNode baseNode) throws ParseException {
    double i ;
    double value ;
    ExpressionNode n = new ExpressionNode(baseNode);
    TreeNode n1,n2 = null;
    n1 = Primary(n);
     n.addChild(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULT:
    case DIVIDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
        jj_consume_token(MULT);
        n2 = Term(n);
              n.setType("*");n.addChild(n2);
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        n2 = Term(n);
              n.setType("/");n.addChild(n2);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
        if (n2 == null)
            {if (true) return n1 ;}
        {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public TreeNode Primary(TreeNode baseNode) throws ParseException {
    Token t, tType ;
    TreeNode paramNode;
    double d ;
    //ExpressionNode n = new ExpressionNode(baseNode);
    TreeNode n,n1 = null;
    ArrayList<TreeNode> params = new ArrayList<TreeNode>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t = jj_consume_token(NUMBER);
      {if (true) return new ConstantNode(Double.parseDouble(t.image), baseNode);}
      break;
    case 66:
      jj_consume_token(66);
      n = Expr(baseNode);
      jj_consume_token(67);
          {if (true) return n;}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      n1 = Primary(baseNode);
        n = new ExpressionNode(baseNode);
        ((ExpressionNode)n).setType("-");
        n.addChild(new ConstantNode(0.0, n));
        n.addChild(n1);
        {if (true) return n ;}
      break;
    case STR:
      t = jj_consume_token(STR);
        {if (true) return new ConstantNode(t.image, baseNode);}
      break;
    default:
      jj_la1[18] = jj_gen;
      if (jj_2_8(2147483647)) {
        t = jj_consume_token(ID);
        jj_consume_token(66);
        paramNode = Expr(baseNode);
                                              params.add(paramNode);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 68:
            ;
            break;
          default:
            jj_la1[17] = jj_gen;
            break label_3;
          }
          jj_consume_token(68);
          paramNode = Expr(baseNode);
                                                                                                      params.add(paramNode);
        }
        jj_consume_token(67);
        {if (true) return new FunctionCallNode(t.image, params, baseNode);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          t = jj_consume_token(ID);
        {if (true) return new VariableNode(t.image, baseNode);}
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public AssignNode AssignWithoutEOL(TreeNode baseNode) throws ParseException {
    AssignNode n;
    TreeNode expr;
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
      break;
    case IDWITHSUFFIX:
      t = jj_consume_token(IDWITHSUFFIX);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(EQUALS);
    expr = Expr(baseNode);
        n = new AssignNode(t.image, baseNode);
        n.addChild(expr);
        {if (true) return  n;}
    throw new Error("Missing return statement in function");
  }

  static final public AssignNode AssignWithEOL(TreeNode baseNode) throws ParseException {
    AssignNode n;
    n = AssignWithoutEOL(baseNode);
    jj_consume_token(EOL);
        {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public TreeNode LogExpr(TreeNode baseNode) throws ParseException {
    //boolean l, r, result;
    ExpressionNode n = new ExpressionNode(baseNode);
    TreeNode n1,n2 = null;
    n1 = ANDS(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
    case XOR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        jj_consume_token(OR);
        n2 = LogExpr(n);
               n.setType("OR");n.addChild(n1);n.addChild(n2);
        break;
      case XOR:
        jj_consume_token(XOR);
        n2 = LogExpr(n);
              n.setType("XOR");n.addChild(n1);n.addChild(n2);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
        if (n2 == null)
            {if (true) return n1;}
         {if (true) return n ;}
    throw new Error("Missing return statement in function");
  }

  static final public TreeNode ANDS(TreeNode baseNode) throws ParseException {
    //boolean l, r;
    ExpressionNode n = new ExpressionNode(baseNode);
    TreeNode n1,n2 = null;
    n1 = Relational(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      n2 = ANDS(n);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
        if (n2 == null)
            {if (true) return n1;}
         {if (true) return n ;}
    throw new Error("Missing return statement in function");
  }

  static final public TreeNode Relational(TreeNode baseNode) throws ParseException {
    //double l, r;
    //boolean result;
    ExpressionNode n = new ExpressionNode(baseNode);
    TreeNode n1,n2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      n2 = Relational(n);
        n1 = new ConstantNode(0, n);
        n.setType("NOT");
        n.addChild(n1);
        n.addChild(n2);
        {if (true) return n;}
      break;
    default:
      jj_la1[26] = jj_gen;
      if (jj_2_9(2147483647)) {
        jj_consume_token(66);
        n1 = LogExpr(n);
        jj_consume_token(67);
      {if (true) return n1;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STR:
        case MINUS:
        case NUMBER:
        case ID:
        case 66:
          n1 = Expr(n);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case GREATEREQUALS:
          case LESSEQUALS:
          case GREATER:
          case LESS:
          case 69:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case GREATER:
              jj_consume_token(GREATER);
              n2 = Expr(n);
              n.setType(">");n.addChild(n1);n.addChild(n2);
              break;
            case LESS:
              jj_consume_token(LESS);
              n2 = Expr(n);
              n.setType("<");n.addChild(n1);n.addChild(n2);
              break;
            case GREATEREQUALS:
              jj_consume_token(GREATEREQUALS);
              n2 = Expr(n);
              n.setType(">=");n.addChild(n1);n.addChild(n2);
              break;
            case LESSEQUALS:
              jj_consume_token(LESSEQUALS);
              n2 = Expr(n);
              n.setType("<=");n.addChild(n1);n.addChild(n2);
              break;
            case 69:
              jj_consume_token(69);
              n2 = Expr(n);
              n.setType("==");n.addChild(n1);n.addChild(n2);
              break;
            default:
              jj_la1[24] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[25] = jj_gen;
            ;
          }
        if (n2 == null)
            {if (true) return n1;}
         {if (true) return n ;}
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public TreeNode Print(TreeNode baseNode) throws ParseException {
    TreeNode printNode = new PrintNode(baseNode), expr;
    jj_consume_token(PRINT);
    expr = Expr(printNode);
                                      printNode.addChild(expr);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 68:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_4;
      }
      jj_consume_token(68);
      expr = Expr(printNode);
                                                                                                 printNode.addChild(expr);
    }
    jj_consume_token(EOL);
        {if (true) return printNode;}
    throw new Error("Missing return statement in function");
  }

  static final public void Function(TreeNode baseNode) throws ParseException {
    Token fName;
    Token pType = null;
    Token pName;
    ArrayList<Parameter> params = new ArrayList<Parameter>();
    FunctionNode functionNode;
    TreeNode next;
    jj_consume_token(FUNCTION);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      fName = jj_consume_token(ID);
      break;
    case IDWITHSUFFIX:
      fName = jj_consume_token(IDWITHSUFFIX);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 66:
      jj_consume_token(66);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        pName = jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
          jj_consume_token(AS);
          pType = TYPE();
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
                                                                if (pType !=null){
                                                                params.add(new Parameter(pName.image, pType.image));
                                                                pType = null;
                                                                }
                                                                else
                                                                params.add(new Parameter(pName.image, "DOUBLE"));
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 68:
            ;
            break;
          default:
            jj_la1[31] = jj_gen;
            break label_5;
          }
          jj_consume_token(68);
          pName = jj_consume_token(ID);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AS:
            jj_consume_token(AS);
            pType = TYPE();
            break;
          default:
            jj_la1[32] = jj_gen;
            ;
          }
                                                                  if (pType !=null){
                                                                        params.add(new Parameter(pName.image, pType.image));
                                                                        pType = null;
                                                                    }
                                                                    else
                                                                        params.add(new Parameter(pName.image, "DOUBLE"));
        }
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      jj_consume_token(67);
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    jj_consume_token(EOL);
        functionNode = new FunctionNode(fName.image, params, "DOUBLE", baseNode);
        baseNode.Functions.put(fName.image, functionNode);
    next = Body(functionNode);
        functionNode.addChild(next);
    jj_consume_token(ENDFUNCTION);
    jj_consume_token(EOL);
  }

  static final public void Sub(TreeNode baseNode) throws ParseException {
    Token sName;
    Token pType = null;
    Token pName;
    ArrayList<Parameter> params = new ArrayList<Parameter>();
    SubNode subNode;
    TreeNode next;
    jj_consume_token(SUB);
    sName = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 66:
      jj_consume_token(66);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        pName = jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
          jj_consume_token(AS);
          pType = TYPE();
          break;
        default:
          jj_la1[35] = jj_gen;
          ;
        }
                                                                if (pType !=null){
                                                                params.add(new Parameter(pName.image, pType.image));
                                                                pType = null;
                                                                }
                                                                else
                                                                params.add(new Parameter(pName.image, "DOUBLE"));
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 68:
            ;
            break;
          default:
            jj_la1[36] = jj_gen;
            break label_6;
          }
          jj_consume_token(68);
          pName = jj_consume_token(ID);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AS:
            jj_consume_token(AS);
            pType = TYPE();
            break;
          default:
            jj_la1[37] = jj_gen;
            ;
          }
                                                                  if (pType !=null){
                                                                        params.add(new Parameter(pName.image, pType.image));
                                                                        pType = null;
                                                                    }
                                                                    else
                                                                        params.add(new Parameter(pName.image, "DOUBLE"));
        }
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      jj_consume_token(67);
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    jj_consume_token(EOL);
        subNode = new SubNode(sName.image, params);
        baseNode.Subs.put(sName.image, subNode);
    next = Body(subNode);
        subNode.addChild(next);
    jj_consume_token(END);
    jj_consume_token(SUB);
    jj_consume_token(EOL);
  }

  static final public TreeNode SubCall(TreeNode baseNode) throws ParseException {
    TreeNode paramNode;
    Token t;
    ArrayList<TreeNode> params = new ArrayList<TreeNode>();
    t = jj_consume_token(ID);
    jj_consume_token(66);
    paramNode = Expr(baseNode);
                                              params.add(paramNode);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 68:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_7;
      }
      jj_consume_token(68);
      paramNode = Expr(baseNode);
                                                                                                      params.add(paramNode);
    }
    jj_consume_token(67);
        {if (true) return new SubCallNode(t.image, params, baseNode);}
    throw new Error("Missing return statement in function");
  }

  static final public TreeNode Input(TreeNode baseNode) throws ParseException {
    ArrayList<String> variables = new ArrayList<String>();
    Token t;
    jj_consume_token(INPUT);
    t = jj_consume_token(ID);
                     variables.add(t.image);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 68:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_8;
      }
      jj_consume_token(68);
      t = jj_consume_token(ID);
                                                           variables.add(t.image);
    }
        {if (true) return new InputNode(variables, baseNode);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_3R_9() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_scan_token(69)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_scan_token(LESSEQUALS)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) jj_scanpos = xsp;
    if (jj_scan_token(ID)) return true;
    xsp = jj_scanpos;
    if (jj_3R_66()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_scan_token(GREATEREQUALS)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_scan_token(LESS)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_scan_token(68)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_67()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_scan_token(GREATER)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_3R_76()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(KWTYPE)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(EOL)) return true;
    Token xsp;
    if (jj_3R_61()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_61()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(KWTYPE)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(66)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_51()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_scan_token(68)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(66)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_107() {
    if (jj_scan_token(AS)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  static private boolean jj_3R_106() {
    if (jj_scan_token(DO)) return true;
    if (jj_scan_token(EOL)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(LOOP)) return true;
    if (jj_scan_token(UNTIL)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_scan_token(EOL)) return true;
    if (jj_3R_9()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    if (jj_scan_token(ENDIF)) return true;
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_scan_token(AS)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_scan_token(68)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(EXIT)) return true;
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_94()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_105() {
    if (jj_scan_token(DO)) return true;
    if (jj_scan_token(EOL)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(LOOP)) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  static private boolean jj_3R_109() {
    if (jj_scan_token(68)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_scan_token(66)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) jj_scanpos = xsp;
    if (jj_scan_token(67)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(GOTO)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(INPUT)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_62()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(66)) return true;
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_71()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(67)) return true;
    return false;
  }

  static private boolean jj_3R_108() {
    if (jj_scan_token(AS)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_scan_token(EOL)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_scan_token(DO)) return true;
    if (jj_scan_token(UNTIL)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(EOL)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(LOOP)) return true;
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_3R_12()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  static private boolean jj_3R_95() {
    if (jj_scan_token(AS)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_scan_token(68)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_50()) return true;
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_scan_token(DO)) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(EOL)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(LOOP)) return true;
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_96()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_scan_token(66)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) jj_scanpos = xsp;
    if (jj_scan_token(67)) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(STEP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    return false;
  }

  static private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    }
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(DO)) return true;
    if (jj_scan_token(EOL)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(LOOP)) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(TO)) return true;
    if (jj_3R_51()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) jj_scanpos = xsp;
    if (jj_scan_token(EOL)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(NEXT)) return true;
    xsp = jj_scanpos;
    if (jj_3R_53()) jj_scanpos = xsp;
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(EOL)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(WEND)) return true;
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(68)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(SUB)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) jj_scanpos = xsp;
    if (jj_scan_token(EOL)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(SUB)) return true;
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_3R_106()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(DO)) return true;
    if (jj_scan_token(UNTIL)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(EOL)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(LOOP)) return true;
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_3R_105()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(DO)) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(EOL)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(LOOP)) return true;
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    }
    return false;
  }

  static private boolean jj_3R_101() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(66)) return true;
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_109()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(67)) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_3R_90()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_3R_89()) return true;
    return false;
  }

  static private boolean jj_3R_100() {
    if (jj_scan_token(STR)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_99() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_3R_72()) return true;
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_scan_token(66)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(67)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(65)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(DIM)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_104() {
    if (jj_scan_token(DIVIDE)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(FUNCTION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_64()) jj_scanpos = xsp;
    if (jj_scan_token(EOL)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(ENDFUNCTION)) return true;
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_scan_token(MULT)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_3R_49()) return true;
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_3R_85()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_scan_token(AS)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_57()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public TestTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[42];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xa2008,0x0,0xa2008,0x40000040,0x8000,0x0,0x0,0x400000,0x400000,0x10,0x80000,0x80000,0xa0000,0x60000000,0x60000000,0xc000000,0xc000000,0x0,0x40000040,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000040,0x0,0x0,0x10,0x0,0x10,0x0,0x0,0x10,0x0,0x10,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xeca3800c,0x20000000,0xeca38008,0x20000001,0x0,0x20000000,0x20,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x20000000,0x60000000,0x3000,0x3000,0x800,0x780,0x780,0x4000,0x20000001,0x0,0x60000000,0x0,0x0,0x0,0x20000000,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x4,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x4,0x10,0x0,0x0,0x10,0x0,0x0,0x4,0x0,0x10,0x0,0x0,0x4,0x10,0x10,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[9];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Test(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Test(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TestTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Test(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new TestTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Test(TestTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(TestTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[70];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 42; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 70; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
