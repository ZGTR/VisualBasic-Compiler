/* Generated By:JavaCC: Do not edit this line. TestTokenManager.java */
package MattusCompilerPackage;
import java.io.FileNotFoundException;
import java.io.FileReader;
import JJTree.*;
import java.util.ArrayList;

/** Token Manager. */
public class TestTokenManager implements TestConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x802400000000L) != 0L)
         {
            jjmatchedKind = 61;
            return 24;
         }
         if ((active0 & 0x40000000000L) != 0L)
            return 2;
         if ((active0 & 0xfa37818027ff018L) != 0L)
         {
            jjmatchedKind = 61;
            return 64;
         }
         if ((active0 & 0x28000000000L) != 0L)
            return 4;
         return -1;
      case 1:
         if ((active0 & 0x100800084010L) != 0L)
            return 64;
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 1;
            return 20;
         }
         if ((active0 & 0xfa3e8300277b008L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 1;
            return 64;
         }
         return -1;
      case 2:
         if ((active0 & 0xfa2803002778000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 2;
            return 64;
         }
         if ((active0 & 0x1680000003008L) != 0L)
            return 64;
         if ((active0 & 0x400000000L) != 0L)
            return 65;
         return -1;
      case 3:
         if ((active0 & 0x2a0803000158000L) != 0L)
            return 64;
         if ((active0 & 0xd02000002620000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 3;
            return 64;
         }
         return -1;
      case 4:
         if ((active0 & 0xc00000000220000L) != 0L)
            return 64;
         if ((active0 & 0x102000002400000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 4;
            return 64;
         }
         return -1;
      case 5:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 5;
            return 64;
         }
         if ((active0 & 0x100000002400000L) != 0L)
            return 64;
         return -1;
      case 6:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 6;
            return 64;
         }
         return -1;
      case 7:
         if ((active0 & 0x2000000000000L) != 0L)
            return 64;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 34:
         return jjStopAtPos(0, 8);
      case 36:
         return jjStopAtPos(0, 31);
      case 39:
         return jjStopAtPos(0, 11);
      case 40:
         return jjStopAtPos(0, 66);
      case 41:
         return jjStopAtPos(0, 67);
      case 42:
         return jjStopAtPos(0, 26);
      case 43:
         return jjStopAtPos(0, 29);
      case 44:
         return jjStopAtPos(0, 68);
      case 45:
         return jjStopAtPos(0, 30);
      case 47:
         return jjStopAtPos(0, 27);
      case 58:
         return jjStopAtPos(0, 65);
      case 60:
         return jjStartNfaWithStates_0(0, 42, 2);
      case 61:
         jjmatchedKind = 38;
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x20L);
      case 62:
         jjmatchedKind = 41;
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 92:
         return jjStopAtPos(0, 28);
      case 95:
         return jjMoveStringLiteralDfa1_0(0x1800000L, 0x0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x80000000010L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x80008L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x802400000000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2000000002000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x800000800000000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x101000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x400000010000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x101000002408000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x20001000004000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x60000L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      case 60:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         break;
      case 61:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000051000L, active1, 0L);
      case 70:
      case 102:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(1, 35, 64);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000420000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x8L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x800080400200000L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 14, 64);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 19, 64);
         return jjMoveStringLiteralDfa2_0(active0, 0x80600000102000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 44, 64);
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(1, 4, 64);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x2008000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000800000L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 66:
      case 98:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 48, 64);
         break;
      case 68:
      case 100:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 65);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 64);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000008000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x400800001020000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L);
      case 77:
      case 109:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 3, 64);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000840000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x820000000000000L);
      case 82:
      case 114:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 64);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 64);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x200002000000000L);
      case 84:
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 64);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 46, 64);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000200000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L);
      case 68:
      case 100:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 64);
         break;
      case 69:
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 64);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 64);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 64);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2200000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 78:
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 64);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L);
      case 79:
      case 111:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 64);
         break;
      case 80:
      case 112:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 64);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 64);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 84:
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 64);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(3, 24);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 64);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L);
      case 69:
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 64);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 76:
      case 108:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 64);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 84:
      case 116:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 64);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 64);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 64);
         break;
      case 71:
      case 103:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 64);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L);
      case 84:
      case 116:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 64);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
      case 78:
      case 110:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 49, 64);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(8, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 64;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 8);
                  else if ((0x6a00000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(41, 42);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAddStates(9, 11);
                  }
                  else if (curChar == 37)
                     jjCheckNAddTwoStates(52, 46);
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 48;
                  else if (curChar == 38)
                     jjCheckNAdd(46);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddStates(12, 17);
                  }
                  else if ((0x6a00000000L & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                  }
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 4;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 2;
                  else if (curChar == 46)
                     jjCheckNAdd(1);
                  if (curChar == 37)
                     jjCheckNAddTwoStates(15, 9);
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 38)
                     jjCheckNAdd(9);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 8);
                  else if ((0x6a00000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(41, 42);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAddStates(9, 11);
                  }
                  else if (curChar == 37)
                     jjCheckNAddTwoStates(52, 46);
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 48;
                  else if (curChar == 38)
                     jjCheckNAdd(46);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 8);
                  else if ((0x6a00000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(41, 42);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAddStates(9, 11);
                  }
                  else if (curChar == 37)
                     jjCheckNAddTwoStates(52, 46);
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 48;
                  else if (curChar == 38)
                     jjCheckNAdd(46);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 8);
                  else if ((0x6a00000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  else if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(26, 34);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(41, 42);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAddStates(9, 11);
                  }
                  else if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(21, 23);
                  else if (curChar == 37)
                     jjCheckNAddTwoStates(52, 46);
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 48;
                  else if (curChar == 38)
                     jjCheckNAdd(46);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar == 62 && kind > 52)
                     kind = 52;
                  break;
               case 3:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 60 && kind > 52)
                     kind = 52;
                  break;
               case 5:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if ((0x6a00000000L & l) != 0L && kind > 60)
                     kind = 60;
                  break;
               case 9:
                  if (curChar == 38 && kind > 60)
                     kind = 60;
                  break;
               case 10:
               case 17:
                  if (curChar == 38)
                     jjCheckNAdd(9);
                  break;
               case 11:
                  if (curChar == 35 && kind > 60)
                     kind = 60;
                  break;
               case 12:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 15:
                  if (curChar == 37 && kind > 60)
                     kind = 60;
                  break;
               case 16:
                  if (curChar == 37)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if (curChar == 37)
                     jjCheckNAddTwoStates(15, 9);
                  break;
               case 21:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(21, 23);
                  break;
               case 26:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(26, 34);
                  break;
               case 37:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddStates(9, 11);
                  break;
               case 40:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 8);
                  break;
               case 43:
                  if ((0x6a00000000L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 46:
                  if (curChar == 38 && kind > 62)
                     kind = 62;
                  break;
               case 47:
               case 54:
                  if (curChar == 38)
                     jjCheckNAdd(46);
                  break;
               case 48:
                  if (curChar == 35 && kind > 62)
                     kind = 62;
                  break;
               case 49:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 52:
                  if (curChar == 37 && kind > 62)
                     kind = 62;
                  break;
               case 53:
                  if (curChar == 37)
                     jjCheckNAdd(52);
                  break;
               case 55:
                  if (curChar == 37)
                     jjCheckNAddTwoStates(52, 46);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddStates(12, 17);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(57);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if (curChar == 46)
                     jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(60);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  break;
               case 62:
                  if (curChar == 46 && kind > 32)
                     kind = 32;
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(63);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 24:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(0, 8);
                  else if (curChar == 126)
                     jjAddStates(18, 22);
                  else if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 44;
                  else if (curChar == 95)
                     jjCheckNAddTwoStates(41, 42);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAddStates(9, 11);
                  }
                  else if (curChar == 96)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  else if (curChar == 95)
                     jjCheckNAddTwoStates(38, 39);
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAddStates(23, 34);
                  }
                  else if (curChar == 126)
                     jjAddStates(35, 39);
                  else if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 7;
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(40, 41);
                  else if (curChar == 96)
                  {
                     if (kind > 60)
                        kind = 60;
                  }
                  break;
               case 20:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(0, 8);
                  else if (curChar == 126)
                     jjAddStates(18, 22);
                  else if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 44;
                  else if (curChar == 95)
                     jjCheckNAddTwoStates(41, 42);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAddStates(9, 11);
                  }
                  else if (curChar == 96)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  else if (curChar == 95)
                     jjCheckNAddTwoStates(38, 39);
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 64:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(0, 8);
                  else if (curChar == 126)
                     jjAddStates(18, 22);
                  else if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 44;
                  else if (curChar == 95)
                     jjCheckNAddTwoStates(41, 42);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAddStates(9, 11);
                  }
                  else if (curChar == 96)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  else if (curChar == 95)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 65:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(0, 8);
                  else if (curChar == 126)
                     jjAddStates(18, 22);
                  else if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 44;
                  else if (curChar == 95)
                     jjCheckNAddTwoStates(41, 42);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAddStates(9, 11);
                  }
                  else if (curChar == 96)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  else if (curChar == 95)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 6:
               case 14:
                  if (curChar == 96 && kind > 60)
                     kind = 60;
                  break;
               case 7:
                  if ((0x400000004000L & l) != 0L && kind > 60)
                     kind = 60;
                  break;
               case 8:
                  if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 13:
                  if (curChar == 126)
                     jjAddStates(35, 39);
                  break;
               case 19:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(40, 41);
                  break;
               case 22:
                  if ((0x4000000040L & l) != 0L && kind > 50)
                     kind = 50;
                  break;
               case 23:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 25:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 27:
                  if ((0x400000004000L & l) != 0L && kind > 51)
                     kind = 51;
                  break;
               case 28:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 36:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddStates(23, 34);
                  break;
               case 37:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 38:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddStates(9, 11);
                  break;
               case 40:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 41:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(0, 8);
                  break;
               case 43:
               case 51:
                  if (curChar == 96 && kind > 62)
                     kind = 62;
                  break;
               case 44:
                  if ((0x400000004000L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 45:
                  if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 50:
                  if (curChar == 126)
                     jjAddStates(18, 22);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 64 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(1, 0);
}
static private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xdffffffa00000000L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAdd(2);
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 10)
                     kind = 9;
                  break;
               case 2:
                  if ((0xdffffffa00000000L & l) == 0L)
                     break;
                  kind = 10;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if ((0x100000200L & l) != 0L)
                     kind = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 2:
                  if ((0x3ffffffe6fffffffL & l) == 0L)
                     break;
                  kind = 10;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 6);
      default :
         return jjMoveNfa_1(1, 0);
   }
}
static private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xdffffffa00000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(0);
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  break;
               case 0:
                  if ((0xdffffffa00000000L & l) == 0L)
                     break;
                  kind = 7;
                  jjCheckNAdd(0);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0x3ffffffe6fffffffL & l) == 0L)
                     break;
                  kind = 7;
                  jjCheckNAdd(0);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   40, 41, 42, 43, 45, 47, 49, 50, 55, 37, 38, 39, 57, 58, 59, 61, 
   62, 63, 51, 53, 52, 46, 54, 37, 38, 39, 40, 41, 42, 43, 45, 47, 
   49, 50, 55, 14, 16, 15, 9, 17, 24, 35, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, "\52", 
"\57", "\134", "\53", "\55", "\44", null, null, null, null, null, null, "\75", 
"\76\75", "\75\74", "\76", "\74", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\15\12", null, 
"\72", "\50", "\51", "\54", "\75\75", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "INSTRING",
   "INCOMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffbffffdfffff259L, 0x3fL, 
};
static final long[] jjtoSkip = {
   0x6L, 0x0L, 
};
static final long[] jjtoMore = {
   0xd80L, 0x0L, 
};
static protected JavaCharStream input_stream;
static private final int[] jjrounds = new int[64];
static private final int[] jjstateSet = new int[128];
static protected char curChar;
/** Constructor. */
public TestTokenManager(JavaCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public TestTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 64; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
