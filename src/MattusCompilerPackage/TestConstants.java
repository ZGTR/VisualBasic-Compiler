/* Generated By:JavaCC: Do not edit this line. TestConstants.java */
package MattusCompilerPackage;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface TestConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int DIM = 3;
  /** RegularExpression Id. */
  int AS = 4;
  /** RegularExpression Id. */
  int ANYTHING = 5;
  /** RegularExpression Id. */
  int STR = 6;
  /** RegularExpression Id. */
  int MID = 7;
  /** RegularExpression Id. */
  int COMMENTSTR = 9;
  /** RegularExpression Id. */
  int MIDCOMMENT = 10;
  /** RegularExpression Id. */
  int LET = 12;
  /** RegularExpression Id. */
  int FOR = 13;
  /** RegularExpression Id. */
  int TO = 14;
  /** RegularExpression Id. */
  int STEP = 15;
  /** RegularExpression Id. */
  int NEXT = 16;
  /** RegularExpression Id. */
  int WHILE = 17;
  /** RegularExpression Id. */
  int WEND = 18;
  /** RegularExpression Id. */
  int DO = 19;
  /** RegularExpression Id. */
  int LOOP = 20;
  /** RegularExpression Id. */
  int UNTIL = 21;
  /** RegularExpression Id. */
  int SHARED = 22;
  /** RegularExpression Id. */
  int UNSIGNED = 23;
  /** RegularExpression Id. */
  int BIT = 24;
  /** RegularExpression Id. */
  int STRING = 25;
  /** RegularExpression Id. */
  int MULT = 26;
  /** RegularExpression Id. */
  int DIVIDE = 27;
  /** RegularExpression Id. */
  int DIVIDEINT = 28;
  /** RegularExpression Id. */
  int PLUS = 29;
  /** RegularExpression Id. */
  int MINUS = 30;
  /** RegularExpression Id. */
  int DOLLARSIGN = 31;
  /** RegularExpression Id. */
  int NUMBER = 32;
  /** RegularExpression Id. */
  int DIGITS = 33;
  /** RegularExpression Id. */
  int END = 34;
  /** RegularExpression Id. */
  int IF = 35;
  /** RegularExpression Id. */
  int THEN = 36;
  /** RegularExpression Id. */
  int ELSE = 37;
  /** RegularExpression Id. */
  int EQUALS = 38;
  /** RegularExpression Id. */
  int GREATEREQUALS = 39;
  /** RegularExpression Id. */
  int LESSEQUALS = 40;
  /** RegularExpression Id. */
  int GREATER = 41;
  /** RegularExpression Id. */
  int LESS = 42;
  /** RegularExpression Id. */
  int AND = 43;
  /** RegularExpression Id. */
  int OR = 44;
  /** RegularExpression Id. */
  int XOR = 45;
  /** RegularExpression Id. */
  int NOT = 46;
  /** RegularExpression Id. */
  int EXIT = 47;
  /** RegularExpression Id. */
  int SUB = 48;
  /** RegularExpression Id. */
  int FUNCTION = 49;
  /** RegularExpression Id. */
  int ENDIF = 50;
  /** RegularExpression Id. */
  int ENDFUNCTION = 51;
  /** RegularExpression Id. */
  int NOTEQUALS = 52;
  /** RegularExpression Id. */
  int KWTYPE = 53;
  /** RegularExpression Id. */
  int TYPENAME = 54;
  /** RegularExpression Id. */
  int GOTO = 55;
  /** RegularExpression Id. */
  int SELECT = 56;
  /** RegularExpression Id. */
  int CASE = 57;
  /** RegularExpression Id. */
  int PRINT = 58;
  /** RegularExpression Id. */
  int INPUT = 59;
  /** RegularExpression Id. */
  int TYPESUFFIX = 60;
  /** RegularExpression Id. */
  int ID = 61;
  /** RegularExpression Id. */
  int IDWITHSUFFIX = 62;
  /** RegularExpression Id. */
  int EOL = 63;
  /** RegularExpression Id. */
  int DIG = 64;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int INSTRING = 1;
  /** Lexical state. */
  int INCOMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"DIM\"",
    "\"AS\"",
    "<ANYTHING>",
    "\"\\\"\"",
    "<MID>",
    "\"\\\"\"",
    "<COMMENTSTR>",
    "<MIDCOMMENT>",
    "\"\\\'\"",
    "\"LET\"",
    "\"FOR\"",
    "\"TO\"",
    "\"STEP\"",
    "\"NEXT\"",
    "\"WHILE\"",
    "\"WEND\"",
    "\"DO\"",
    "\"LOOP\"",
    "\"UNTIL\"",
    "\"SHARED\"",
    "\"_UNSIGNED\"",
    "\"_BIT\"",
    "\"STRING\"",
    "\"*\"",
    "\"/\"",
    "\"\\\\\"",
    "\"+\"",
    "\"-\"",
    "\"$\"",
    "<NUMBER>",
    "<DIGITS>",
    "\"END\"",
    "\"IF\"",
    "\"THEN\"",
    "\"ELSE\"",
    "\"=\"",
    "\">=\"",
    "\"=<\"",
    "\">\"",
    "\"<\"",
    "\"AND\"",
    "\"OR\"",
    "\"XOR\"",
    "\"NOT\"",
    "\"EXIT\"",
    "\"SUB\"",
    "\"FUNCTION\"",
    "<ENDIF>",
    "<ENDFUNCTION>",
    "<NOTEQUALS>",
    "\"TYPE\"",
    "<TYPENAME>",
    "\"GOTO\"",
    "\"SELECT\"",
    "\"CASE\"",
    "\"PRINT\"",
    "\"INPUT\"",
    "<TYPESUFFIX>",
    "<ID>",
    "<IDWITHSUFFIX>",
    "\"\\r\\n\"",
    "<DIG>",
    "\":\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\"==\"",
  };

}
